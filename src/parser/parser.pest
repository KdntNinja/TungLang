// The main rule that defines a `.tung` file.
// A file consists of zero or more statements, each optionally followed by a newline, and ends with EOI (End of Input).
file = { SOI ~ (statement ~ NEWLINE*)* ~ EOI }

// Comments are allowed anywhere and should be skipped
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* ~ (NEWLINE | EOI) }

// A statement can either be an assignment or a function call.
statement = { assignment | function_call }

// An assignment is a key-value pair where the key is an identifier and the value is a number.
assignment = { identifier ~ "=" ~ value }

// A function call consists of an identifier (function name) followed by arguments enclosed in parentheses.
// Arguments can be expressions separated by commas.
function_call = { identifier ~ "(" ~ (expression ~ ("," ~ expression)*)? ~ ")" }

// An expression can be an identifier, a value, or a binary expression.
expression = { binary_expr | identifier | value }

// Binary expressions can use any expression on either side, not just identifiers
binary_expr = { term ~ operator ~ term }

// Term can be an identifier, a value, or a parenthesized expression
term = { identifier | value | "(" ~ expression ~ ")" }

// Operators for binary expressions.
operator = { "+" | "-" | "*" | "/" }

// Identifiers are alphanumeric strings (e.g., variable names or function names).
identifier = @{ ASCII_ALPHANUMERIC+ }

// Values can be either a number or a string literal.
value = { number | string_literal }

// Numbers are sequences of digits.
number = { ASCII_DIGIT+ }

// String literals are enclosed in double quotes.
string_literal = { "\"" ~ string_content ~ "\"" }
string_content = { (!("\"") ~ ANY)* }

// Whitespace includes spaces and tabs
WHITESPACE = _{ " " | "\t" }

// NEWLINE is defined separately for better control in the grammar
NEWLINE = _{ "\r\n" | "\n" | "\r" }
